{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/app/src/components/DragItem.js\";\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { Card, CardImg, CardHeader } from 'reactstrap';\nimport { Spinner } from 'react-bootstrap';\nimport update from 'immutability-helper';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Popup from './Popup';\n\nfunction DragCard({\n  id,\n  index,\n  moveCard,\n  dataset\n}) {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        cardSelected = _useState2[0],\n        setCardSelected = _useState2[1];\n\n  const ref = useRef(null);\n\n  const _useDrop = useDrop({\n    accept: 'cardtype',\n\n    hover(item) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        drop = _useDrop2[1];\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'cardtype',\n      id,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        drag = _useDrag2[1];\n\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n\n  const onSelectStatusChange = () => {\n    setCardSelected(null);\n  };\n\n  return React.createElement(\"div\", {\n    ref: ref,\n    style: {\n      opacity\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Card, {\n    onClick: () => {\n      setCardSelected(dataset);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    style: {\n      textAlign: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, dataset.title !== null ? dataset.title : 'Loading'), React.createElement(CardImg, {\n    src: dataset.img,\n    alt: dataset.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(Popup, {\n    cardSelected: cardSelected,\n    onSelectedChange: onSelectStatusChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n}\n\nfunction useDidChange(value) {\n  let ref = useRef();\n  let hasChanged = ref.current !== value;\n  useEffect(() => {\n    ref.current = value;\n  });\n  return hasChanged;\n}\n\nfunction DragItem(props) {\n  let dataset = props.content;\n  let datasetDidChange = useDidChange(dataset);\n\n  const _useState3 = useState(dataset),\n        _useState4 = _slicedToArray(_useState3, 2),\n        cards = _useState4[0],\n        setCards = _useState4[1];\n\n  useEffect(() => {\n    if (datasetDidChange) {\n      setCards(dataset);\n    }\n  }, [datasetDidChange, dataset, cards]);\n  const moveCard = useCallback((dragIndex, hoverIndex) => {\n    const dragCard = cards[dragIndex];\n    setCards(update(cards, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]]\n    }));\n  }, [cards]);\n  const imgcard = cards.map((card, i) => {\n    return React.createElement(\"div\", {\n      key: card.id,\n      className: \"col-12 col-sm-6 col-md-4 mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(DragCard, {\n      id: card.id,\n      index: i,\n      moveCard: moveCard,\n      dataset: card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  });\n\n  const updateGrid = () => {\n    props.onOrderChange(cards);\n  };\n\n  if (dataset.length === 0) {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        marginTop: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-md-center m-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      animation: \"border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        cursor: 'move'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, imgcard), React.createElement(\"div\", {\n      className: \"row justify-content-md-center m-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: updateGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Update\")));\n  }\n}\n\nexport default DragItem;","map":{"version":3,"sources":["/app/src/components/DragItem.js"],"names":["React","useState","useCallback","useRef","useEffect","Card","CardImg","CardHeader","Spinner","update","useDrag","useDrop","Popup","DragCard","id","index","moveCard","dataset","cardSelected","setCardSelected","ref","accept","hover","item","current","dragIndex","hoverIndex","drop","type","collect","monitor","isDragging","drag","opacity","onSelectStatusChange","textAlign","title","img","useDidChange","value","hasChanged","DragItem","props","content","datasetDidChange","cards","setCards","dragCard","$splice","imgcard","map","card","i","updateGrid","onOrderChange","length","marginTop","cursor"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { Card, CardImg, CardHeader } from 'reactstrap';\nimport { Spinner } from 'react-bootstrap';\nimport update from 'immutability-helper';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Popup from './Popup';\n\nfunction DragCard({ id, index, moveCard, dataset }) {\n\n    const [cardSelected, setCardSelected] = useState(null)\n    const ref = useRef(null)\n    const [, drop] = useDrop({\n        accept: 'cardtype',\n        hover(item) {\n            if (!ref.current) {\n                return\n            }\n        const dragIndex = item.index\n        const hoverIndex = index\n\n        if (dragIndex === hoverIndex) {\n            return\n        }\n        moveCard(dragIndex, hoverIndex)\n        item.index = hoverIndex\n    },\n  })\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: 'cardtype', id, index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const opacity = isDragging ? 0 : 1\n    drag(drop(ref))\n\n    const onSelectStatusChange = () => {\n        setCardSelected(null);\n    }\n\n    return (\n        <div ref={ref} style={{ opacity }}>\n            <Card onClick={() => { setCardSelected(dataset) }}>\n                <CardHeader style={{ textAlign: 'left' }}>{dataset.title !== null ? dataset.title : 'Loading'}</CardHeader>\n                <CardImg src={dataset.img} alt={dataset.type}></CardImg>\n            </Card>\n            <Popup cardSelected={cardSelected} onSelectedChange={onSelectStatusChange} />\n        </div>\n    )\n}\n\n\nfunction useDidChange(value) {\n    let ref = useRef()\n    let hasChanged = ref.current !== value\n    useEffect(() => {\n        ref.current = value\n    })\n    return hasChanged\n}\n\n\nfunction DragItem(props) {\n    let dataset = props.content\n    let datasetDidChange = useDidChange(dataset)\n    const [cards, setCards] = useState(dataset)\n\n    useEffect(() => {\n        if (datasetDidChange) {\n        setCards(dataset)\n        }\n    }, [datasetDidChange, dataset, cards])\n\n    const moveCard = useCallback(\n        (dragIndex, hoverIndex) => {\n            const dragCard = cards[dragIndex]\n            setCards(\n            update(cards, {\n                $splice: [\n                [dragIndex, 1],\n                [hoverIndex, 0, dragCard],\n                ],\n            }),\n        )},\n    [cards])\n\n    const imgcard = cards.map((card, i) => {\n        return (\n            <div key={card.id} className=\"col-12 col-sm-6 col-md-4 mb-2\">\n                <DragCard id={card.id} index={i} moveCard={moveCard} dataset={card}></DragCard>\n            </div>\n        )\n    });\n\n    const updateGrid = () => {\n        props.onOrderChange(cards)\n    }\n\n    if (dataset.length === 0) {\n        return (\n            <div className=\"container\" style={{ marginTop:200 }}>\n                <div className=\"row justify-content-md-center m-4\">\n                    <Spinner animation=\"border\" role=\"status\"></Spinner>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"container\">\n                <div className=\"row\" style={{ cursor: 'move' }}>\n                    {imgcard}\n                </div>\n                <div className='row justify-content-md-center m-4'>\n                    <button onClick={updateGrid}>Update</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DragItem"]},"metadata":{},"sourceType":"module"}